plugins {
    id "java"
    id "com.dorongold.task-tree" version "1.3.1"
}

sourceCompatibility = 1.8

repositories {
    jcenter()

    // If `mavenLocal()` is placed before `jcenter()`,
    // you can see the source code for libraries in IntelliJ.
    // Why?
    mavenLocal()
}

dependencies {
    compile("com.github.docker-java:docker-java:${dockerJavaVersion}")
    compile("com.google.guava:guava:$guavaVersion")

    compile("org.apache.avro:avro:${avroVersion}")
    compile("org.apache.commons:commons-lang3:${commonsLang3Version}")
    compile("org.apache.httpcomponents:httpclient:$httpClientVersion")
    compile("commons-io:commons-io:$commonsIoVersion")
    compile("org.bouncycastle:bcprov-jdk15on:$bouncyCastleProviderVersion")
    compile("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    compile("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion")
    compile("org.jsoup:jsoup:$jsoupVersion")
    compile("ch.qos.logback:logback-classic:$logbackVersion")
    compile("org.apache.kafka:kafka-clients:${kafkaClientVersion}")
    compile("org.elasticsearch.client:transport:${elasticsearchVersion}")
    compile("org.hibernate:hibernate-validator:${hibernateValidatorVersion}")
    compile("org.glassfish:javax.el:${elVersion}")
    compile("com.github.javaparser:javaparser-core:${javaParserVersion}")
//    compile("io.netty:netty-all:${nettyVersion}")
    compile("org.objenesis:objenesis:${objenesisVersion}")
    compile("com.github.jknack:handlebars:${handlebarsVersion}")
    compile("com.jayway.jsonpath:json-path:${jsonPathVersion}")
    compile("org.apache.commons:commons-pool2:${commonsPool2Version}")
    compile("org.pcollections:pcollections:${pcollectionsVersion}")
    compile("org.seleniumhq.selenium:selenium-java:${seleniumVersion}")
    compile("org.xmlunit:xmlunit-core:${xmlUnitVersion}")
    compile("org.apache.commons:commons-math3:${commonsMath3Version}")
    compile("org.ta4j:ta4j-core:${ta4JVersion}")
    compile("com.opencsv:opencsv:${opencsvVersion}")
    compile("org.python:jython-standalone:${jythonVersion}")
    compile("commons-validator:commons-validator:${commonsValidatorVersion}")
    compile("org.thymeleaf:thymeleaf:${thymeleafVersion}")
    compile("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}")
    compile("io.projectreactor:reactor-core:${reactorVersion}")
    compile("io.projectreactor.netty:reactor-netty:${reactorNettyVersion}")
    compile("io.github.resilience4j:resilience4j-retry:${resilience4JVersion}")

    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")

    testCompile("org.assertj:assertj-core:$assertJVersion")
    testCompile("junit:junit:$jUnitVersion")

    // NOTE: Why does `mockito-all` include `org.hamcrest.Matcher`?
    // This leads to `java.lang.NoSuchMethodError: org.hamcrest.Matcher.describeMismatch(Ljava/lang/Object;Lorg/hamcrest/Description;)V`.
//    testCompile("org.mockito:mockito-all:${mockitoVersion}")
    testCompile("org.mockito:mockito-core:${mockitoVersion}")

    testCompileOnly("org.projectlombok:lombok:$lombokVersion")
    testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
}

wrapper {
    gradleVersion = '5.1.1'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation', '-parameters']
}

test {
    testLogging {
        showStandardStreams = true
    }
}
